@page "/Restaurateur"
@using Client.Connection
@using SharedLibrary.Models
@using SharedLibrary.Models.Restaurateur
@using System.Text.Json
@using Client.Connection.Authentication
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JsRuntime
@inject IRestaurateurManager _restaurateurManager

@attribute [Authorize(Policy = "Restaurateur")]

<AuthorizeView>
    <div class="mt-6 p-6 max-w-l bg-white rounded-xl shadow-md flex-wrap items-center border border-gray-300">

        <p class="text-3xl text-red-700 font-bold mx-auto text-center mt-5">Velkommen restauratør</p>

        <p class="text-xl text-red-700 font-bold mx-auto text-center mt-5">Vælg restaurant</p>
        @if (_restaurants == null)
        {
            <p>Loader...</p>
        }
        else
        {
            <div class="flex justify-center mx-auto mt-4">
                <select name="chosenRestaurant" class=" border border-gray-300 rounded" @bind="RestaurantId">
                    @{
                        foreach (Restaurant restaurant in _restaurants)
                        {
                            <option value="@restaurant.Id">@restaurant.Name</option>
                        }
                    }
                </select>
            </div>
            <p class="text-xl text-red-700 font-bold mx-auto text-center mt-5">Tilføj ret til menukortet</p>
            <div class="flex justify-center mx-auto mt-4">
                <label class="text-gray-700 text-sm font-semibold">Rettens navn</label>
                <input type="text" class="ml-4 border border-gray-300 rounded" placeholder="f.eks. boller i karry" @bind-value="DishName"/>
            </div>
            <div class="flex justify-center mx-auto mt-4">
                <label class="text-gray-700 text-sm font-semibold">Beskrivelse</label>
                <form class="form-group" id="dishForm">
                    <textarea form="dishForm" class="ml-4 border border-gray-300 rounded" placeholder="f.eks. karry-baseret SOVS med kogt kød i klumper smækket ovenpå en klat ris" @bind="DishDescription"></textarea>
                </form>
            </div>
            <div class="flex justify-center my-4">
                <input class="mt-4 bg-red-800 hover:bg-red-600 duration-500 transition text-gray-100 font-semibold py-3 px-8 border border-gray-400 rounded shadow" value="Tilføj ret" type="submit" @onclick="AddDishAsync"/>
            </div>
        }

        <p class="text-red-600 text-sm">@Label</p>
        
        <hr class="border-t-4 border-dotted border-red-600">

        <p class="text-xl text-red-700 font-bold mx-auto text-center mt-5">Restaurantoplysninger</p>
        <p class="text-xl text-red-700 font-bold mx-auto text-center mt-5">Tilføj ret til menukortet</p>
        <p class="text-xl text-red-700 font-bold mx-auto text-center mt-5">Fjern ret fra menukortet</p>

    </div>
</AuthorizeView>

@code {
    private string Label { get; set; }
    private string DishName { get; set; }
    private string DishDescription { get; set; }
    private int RestaurantId { get; set; }
    private RegisteredUser CurrentUser { get; set; }
    /*
    public string restaurantName { get; set; }
    public int cvr { get; set; }
    public string theme { get; set; }
    public string phoneNumber { get; set; }
    public string streetName { get; set; }
    public int houseNumber { get; set; }
    public int postalCode { get; set; }*/

    private List<Restaurant> _restaurants;


    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUser();
        _restaurants = await _restaurateurManager.GetRestaurantsFromRestaurateurIdAsync(CurrentUser.UserId);
    }

    private async Task GetCurrentUser()
    {
        string userAsJson = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "currentUser");
        if (!string.IsNullOrEmpty(userAsJson))
        {
            User user = JsonSerializer.Deserialize<RegisteredUser>(userAsJson);
            CurrentUser = (RegisteredUser) user;
        }
    }

    private async Task AddDishAsync()
    {
        try
        {
            if (DishName is null or "")
            {
                Label = "Retten skal have et navn";
            }
            else if (RestaurantId == 0)
            {
                Label = "Vælg venligst restaurant";
            }
            else
            {
                Dish dish = new Dish()
                {
                    Name = DishName,
                    Description = DishDescription,
                    RestaurantId = RestaurantId
                };


                bool result = await _restaurateurManager.AddDishAsync(dish);

                if (result)
                {
                    Label = "Succes";
                }
                else if (!result)
                {
                    Label = "Netværksfejl";
                }
            }
        }
        catch (Exception e)
        {
            Label = "Noget gik galt med tilføjelse af ret, kontakt backend";
            Console.WriteLine(e.StackTrace);
        }
    }

}