@page "/Swipe/{groupId}"
@using SharedLibrary.Models
@using System.Text.Json
@using Client.Connection.GroupManagement
@inject IGroupManager GroupManager
@inject IJSRuntime JsRuntime

@attribute [Authorize(Policy = "SignedIn")]

<AuthorizeView>
    @if (Group is null)
    {
        <PageLoading/>
    }
    else if (!IsGroupMember())
    {
        <p>Skrid pomfrit, det er en lukket fest!</p>
    }
    else
    {
        <!-- component -->
        <div class="p-16">
            <div class="w-full m-auto ">
                @if (IsStopped)
                {
                    <div class="w-4/5 mx-auto overflow-hidden rounded-xl shadow-md bg-white">
                        <header class="items-center py-12 px-4 text-center">
                            <h3 class="text-2xl text-center text-gray-800">
                                Primaturt stoppet af gruppeejeren
                                <br/>
                                <table class="table-active mt-8 border border-red-600">
                                
                                    @foreach (CustomPair pair in votesList)
                                    {
                                        <tr>
                                            <td>@pair.Key</td>
                                            <td>@pair.Value</td>
                                        </tr>
                                    }
                                    
                                </table>
                            </h3>
                        </header>
                    </div>
                }
                else if (!IsMatch)
                {
                    @if (!IsWaiting)
                    {
                        <div class="w-4/5 mx-auto overflow-hidden rounded-xl shadow-md bg-white">
                            
                            <SwipeObject SwipeTitle="@SwipeTitle" ImgUrl="https://picsum.photos/640/600/?random" />
                            
                            <div class="flex items-center justify-between p-4">

                                <button
                                    class="w-1/2 py-6 px-4 bg-red-700 hover:bg-red-500 text-white text-2xl rounded-l-xl transition duration-500"
                                    @onclick="VoteNo">
                                    Nej tak
                                </button>

                                <button
                                    class="w-1/2 py-6 px-4 bg-green-700 hover:bg-green-500 text-white text-2xl rounded-r-xl transition duration-500"
                                    @onclick="VoteYes">
                                    Ja tak!
                                </button>
                            </div>

                        </div>
                    }
                    else if (IsNoMatch)
                    {
                        <div class="w-4/5 mx-auto overflow-hidden rounded-xl shadow-md bg-white">
                            <header class="items-center py-12 px-4 text-center">
                                <h3 class="text-2xl text-center text-gray-800">
                                    Desværre... I fandt ikke noget match...
                                    <br/>
                                    Sulten i seng med jer!
                                </h3>
                            </header>
                        </div>
                    }
                    else
                    {
                        <div class="w-4/5 mx-auto overflow-hidden rounded-xl shadow-md bg-white">
                            <header class="items-center py-12 px-4 text-center">
                                <h3 class="text-2xl text-center text-gray-800">
                                    Venter på gruppen bliver færdig...
                                </h3>
                            </header>
                        </div>
                    }
                }
                else
                {
                    <div class="w-4/5 py-2 mx-auto overflow-hidden rounded-xl shadow-md bg-white">
                        <div class="flex items-center justify-between p-2">
                            <h3 class="ml-4 text-4xl text-gray-800">
                                Hurra... I fandt et match!
                            </h3>
                        </div>
                        
                        <SwipeObject SwipeTitle="@SwipeTitle" ImgUrl="https://picsum.photos/640/600/?random" />

                    </div>
                }

            </div>
        </div>
    }
    
    @if (IsGroupOwner && !IsStopped)
    {
        <div class="mt-6 p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4 border border-gray-300 flex flex-wrap">
            <p class="text-gray-600">
                <button
                    class="mt-4 bg-red-800 hover:bg-red-600 duration-500 transition text-gray-100 font-semibold py-3 px-8 border border-gray-400 rounded shadow"
                    @onclick="StopSwipe">
                    Stop swipe!
                </button>
            </p>
        </div>
    }
</AuthorizeView>

@code {

    [Parameter]
    public string GroupId { get; set; }

    private bool IsWaiting;
    private bool IsMatch;
    private bool IsNoMatch;
    private bool IsStopped;
    
    private int SwipeCount;
    private bool IsGroupOwner { get; set; }
    private string SwipeTitle { get; set; }

    private Group Group { get; set; }
    private User User { get; set; }

    private IList<CustomPair> votesList; 

    protected override async Task OnInitializedAsync()
    {
        Group = await GroupManager.GetGroupFromIdAsync(GroupId);
        await GetUser();
        await GroupManager.RegisterSwipePage(this);
        IsGroupOwner = User.Username.Equals(Group.GroupOwner.Username);
        SwipeTitle = Group.SwipeObject[SwipeCount].Value;
    }
    
    public async void NoMatch()
    {
        IsNoMatch = true;
        await InvokeAsync(StateHasChanged);
    }

    public async Task Match(int id)
    {
        IsMatch = true;

        SwipeTitle = SwipeResultTitle(id);
        
        await InvokeAsync(StateHasChanged);
    }

    private bool IsGroupMember()
    {
        foreach (User user in Group.Users)
        {
            if (user.Username.Equals(User.Username))
            {
                return true;
            }
        }

        return false;
    }

    private async Task GetUser()
    {
        string userAsJson = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "currentUser");
        if (userAsJson is not null)
        {
            User = JsonSerializer.Deserialize<User>(userAsJson);
        }
    }

    private async Task VoteYes()
    {
        await GroupManager.CastVote(GroupId, Group.SwipeObject[SwipeCount].Key);
        UpdateCount();
    }

    private async Task VoteNo()
    {
        UpdateCount();
    }

    private void UpdateCount()
    {
        if (IsMatch) return;
        
        if (SwipeCount == Group.SwipeObject.Count - 1)
        {
            IsWaiting = true;
            GroupManager.DoneSwiping(GroupId);
        }
        else
        {
            SwipeCount++;
            SwipeTitle = Group.SwipeObject[SwipeCount].Value;
        }
    }

    private async Task StopSwipe()
    {
        await GroupManager.StopSwipeAsync(GroupId);
    }

    public async Task Stop(IList<CustomPair> stoppedVoteList)
    {
        IsStopped = true;

        votesList = stoppedVoteList;
        
        await InvokeAsync(StateHasChanged);
        Console.WriteLine("T1 ---> STOP!!!! :P");
        
    }

    public string SwipeResultTitle(int id)
    {
        foreach (CustomPair pair in Group.SwipeObject)
        {
            if (pair.Key == id)
            {
                return pair.Value;
            }
        }
        return null;
    }
}