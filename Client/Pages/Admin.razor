@page "/Admin"

@using Client.Connection.Administration
@using Client.Connection.DNNR
@using SharedLibrary.Models

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAdministration _administration
@inject ISharedDNNR SharedDnnr

<AuthorizeView Policy="Admin">
    <div class="mt-6 p-6 max-w-l bg-white rounded-xl shadow-md flex-wrap items-center border border-gray-300">
        <p class="text-3xl text-red-700 font-bold mx-auto text-center mt-5">Velkommen Admin</p>

        <p class="text-xl text-red-700 font-bold mx-auto text-center mt-5">Tilføj fødevaregruppe</p>

        <div class="flex flex-col jusify-center place-content-center mx-auto mt-4 w-1/5">
            <label class="text-gray-700 text-sm font-semibold">Ny Fødevaregruppe</label>
            <input type="text" class="border border-gray-300 rounded" @bind-value="NewFoodGroup"/>
            <div class="my-4 mx-auto">
                <input class="bg-red-800 hover:bg-red-600 duration-500 transition text-gray-100 font-semibold py-3 px-8 border border-gray-400 rounded shadow" value="Tilføj" type="submit" @onclick="AddFoodGroup"/>
            </div>
        </div>
        
        <hr class="border-t-4 border-dotted border-red-600">
        
        <p class="text-xl text-red-700 font-bold mx-auto text-center mt-5">Tilføj ingrediens til fødevaregruppe</p>

        @if (FoodGroupList == null)
        {
            <p>Loader...</p>
        }
        else
        {
            <div class="flex flex-col justify-center mx-auto mt-4 w-1/5">
                <label class="text-gray-700 text-sm font-semibold">Ingrediensnavn</label>
                <input type="text" class=" border border-gray-300 rounded" @bind-value="IngredientName"/>
                <label class="text-gray-700 text-sm font-semibold mt-4">Fødevaregruppe</label>
                <select name="_foodgroupId" class="border border-gray-300 rounded" @bind="FoodGroupId">
                    @foreach (KeyValuePair<int, string> pair in FoodGroupList.OrderBy(pair => pair.Value))
                    {
                        <option value="@pair.Key">@(pair.Value[..1].ToUpper() + pair.Value[1..])</option>
                    }
                </select>
                <div class="my-4 mx-auto">
                    <input class="bg-red-800 hover:bg-red-600 duration-500 transition text-gray-100 font-semibold py-3 px-8 border border-gray-400 rounded shadow" value="Tilføj" type="submit" @onclick="AddIngredientAsync"/>
                </div>
            </div>
        }
        <hr class="border-t-4 border-dotted border-red-600">

        <p class="text-xl text-red-700 font-bold mx-auto text-center mt-5">Tilføj opskrift</p>

        @if (ShowIngredientsList == null ||
             UnitList == null)
        {
            <p>Loader...</p>
        }
        else
        {
            <div>
                <div class="flex justify-center my-5">
                    <label class="text-gray-700 text-sm font-semibold">Opskriftnavn</label>
                    <input type="text" class="ml-4 border border-gray-300 rounded" placeholder="f.eks. boller i karry" @bind-value="RecipeName"/>
                </div>
                <table class="w-1/2 mx-auto border border-gray-300 border-collapse rounded">
                    <thead class="bg-gray-300">
                    <tr class="text-sm">
                        <th class="border border-gray-300">Ingrediens</th>
                        <th class="border border-gray-300">Mængde</th>
                        <th class="border border-gray-300">Måleenhed</th>
                        <th class="border border-gray-300"/>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (RecipeIngredient ingredient in NewRecipeIngredients.OrderBy(ing => ing.IngredientName))
                    {
                        <tr>
                            <td class="border border-gray-300">@ingredient.IngredientName</td>
                            <td class="border border-gray-300">@ingredient.Amount</td>
                            <td class="border border-gray-300">@GetUnitValueFromKey(ingredient.UnitId)</td>
                            @*<td class="border border-gray-300 w-2/5">
                                <button class="bg-red-800 hover:bg-red-600 duration-500 transition px-1.5 border border-red-900 rounded inline-block align-middle">
                                    <i class="oi oi-pencil text-white text-xs text-center"></i>
                                </button>
                            </td>*@
                        </tr>
                    }
                    <tr>
                        <td class="border border-gray-300 w-3/5">
                            <input class="w-full" list="ingredient-list" @bind-value="AddedIngredient"/>

                            <datalist id="ingredient-list">
                                @foreach (string name in IngredientList.Values.OrderBy(value => value))
                                {
                                    <option value="@(name[..1].ToUpper() + name[1..])"/>
                                }
                            </datalist>
                        </td>
                        <td class="border border-gray-300 w-1/5">
                            <input class="w-full" type="number" min="0.5" step="0.5" @bind-value="Amount"/>
                        </td>
                        <td class="border border-gray-300 w-1/5">
                            <select class="w-full" @bind="UnitId">
                                @foreach (KeyValuePair<int, string> pair in UnitList)
                                {
                                    <option value="@pair.Key">@(pair.Value[..1].ToUpper() + pair.Value[1..])</option>
                                }
                            </select>
                        </td>
                        <td class="border border-gray-300 w-2/5">
                            <button class="bg-red-800 hover:bg-red-600 duration-500 transition px-1.5 border border-red-900 rounded inline-block align-middle" @onclick="AddIngredientToNewRecipeIngredientsList">
                                <i class="oi oi-plus text-white text-xs text-center"></i>
                            </button>
                        </td>
                    </tr>
                    </tbody>
                </table>
                <div class="flex justify-center my-5">
                    <input class="mt-4 bg-red-800 hover:bg-red-600 duration-500 transition text-gray-100 font-semibold py-3 px-8 border border-gray-400 rounded shadow" value="Tilføj opskrift" type="submit" @onclick="AddRecipeAsync"/>
                </div>
            </div>
            <p>@Label</p>
        }

        <hr class="border-t-4 border-dotted border-red-600">

        <p class="text-xl text-red-700 font-bold mx-auto text-center mt-5">Tilføj restaurant</p>
        <div>
            <div class="flex justify-center my-5">
                <label class="text-gray-700 text-sm font-semibold">Restaurantnavn</label>
                <input type="text" class="ml-4 border border-gray-300 rounded" placeholder="f.eks. Noma" @bind-value="restaurantName"/>
            </div>
            <table class="mx-auto">
                <thead>
                <tr>
                    <td>CVR</td>
                    <td>Tema</td>
                    <td>Telefonnummer</td>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td>
                        <input type="text" class="border border-gray-300 rounded" placeholder="42" @bind-value="cvr"/>
                    </td>
                    <td>
                        <input type="text" class="border border-gray-300 rounded" placeholder="Michelin-mad" @bind-value="theme"/>
                    </td>
                    <td>
                        <input type="text" class="border border-gray-300 rounded" placeholder="42424242" minlength="8" maxlength="8" @bind-value="phoneNumber"/>
                    </td>
                </tr>
                </tbody>
            </table>
            <table class="mx-auto">
                <thead>
                <tr>
                    <td>Adresse</td>
                </tr>
                <tr>
                    <td>Vejnavn</td>
                    <td>Husnummer</td>
                    <td>Postnummer</td>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td>
                        <input type="text" class="border border-gray-300 rounded" placeholder="Smølfestræde" @bind-value="streetName"/>
                    </td>
                    <td>
                        <input type="text" class="border border-gray-300 rounded" placeholder="42" @bind-value="houseNumber"/>
                    </td>
                    <td>
                        <input type="text" class="border border-gray-300 rounded" placeholder="8700" minlength="4" maxlength="4" @bind-value="postalCode"/>
                    </td>
                </tr>
                </tbody>
            </table>
            <div class="flex justify-center my-5">
                <input class="mt-4 bg-red-800 hover:bg-red-600 duration-500 transition text-gray-100 font-semibold py-3 px-8 border border-gray-400 rounded shadow" value="Tilføj restaurant" type="submit" @onclick="AddRestaurantAsync"/>
            </div>
            <p>@Label</p>

        </div>
    </div>
</AuthorizeView>

@code {
    private int FoodGroupId { set; get; }
    private int UnitId { set; get; }
    private string IngredientName { get; set; }
    private string AddedIngredient { get; set; }
    private string Label { get; set; }
    private decimal Amount { get; set; }
    private string RecipeName { get; set; }
    private string NewFoodGroup { get; set; }
    public string restaurantName { get; set; }
    public int cvr { get; set; }
    public string theme { get; set; }
    public string phoneNumber { get; set; }
    public string streetName { get; set; }
    public int houseNumber { get; set; }
    public int postalCode { get; set; }

    public Dictionary<int, string> FoodGroupList;
    public Dictionary<int, string> UnitList;
    public Dictionary<int, string> IngredientList;
    public List<Restaurant> RestaurantList;
    public List<string> ShowIngredientsList;
    public List<RecipeIngredient> NewRecipeIngredients;

    protected override async Task OnInitializedAsync()
    {
        FoodGroupList = await SharedDnnr.GetFoodgroupListAsync();
        UnitList = await _administration.GetUnitListAsync();
        IngredientList = await SharedDnnr.GetIngredientListAsync();
        RestaurantList = await _administration.GetRestaurantListAsync();
        ShowIngredientsList = new List<string>(IngredientList.Values);
        NewRecipeIngredients = new List<RecipeIngredient>();
    }

    private async Task AddFoodGroup()
    {
        if (NewFoodGroup is null or "")
        {
            Label = "Null i NewFoodGroup";
        }
        else
        {
            try
            {
                bool result = await _administration.AddFoodGroup(NewFoodGroup);

                if (result)
                {
                    Label = "Succes";
                    FoodGroupList = await SharedDnnr.GetFoodgroupListAsync();
                    NewFoodGroup = "";
                }
                else
                {
                    Label = "Netværksfejl";
                }
            }
            catch (Exception e)
            {
                Label = "Noget gik galt, kontakt backend";
            }
        }
    }

    private async Task AddIngredientAsync()
    {
        if (IngredientName is null or "" || FoodGroupId == 0)
        {
            Console.WriteLine("Null I AddIngredient");
            Label = "Null i AddIngredient";
        }
        else
        {
            try
            {
                bool result = await _administration.AddIngredientAsync(IngredientName, FoodGroupId);

                if (result)
                {
                    Label = "Succes";
                    IngredientList = await SharedDnnr.GetIngredientListAsync();
                }
                else
                {
                    Label = "Netværksfejl";
                }
            }
            catch (Exception e)
            {
                Label = "Noget gik galt, kontakt backend";
            }
        }
    }

    private void AddIngredientToNewRecipeIngredientsList()
    {
        if (AddedIngredient is null or "" || Amount == 0 || UnitId == 0)
        {
            Console.WriteLine("null i ingredient til opskrift");
            Label = "null i ingredient til opskrift";
        }
        else
        {
            RecipeIngredient recipeIngredient = new RecipeIngredient
            {
                IngredientName = AddedIngredient,
                Amount = Amount,
                UnitId = UnitId
            };
            NewRecipeIngredients.Add(recipeIngredient);
            AddedIngredient = "";
            Amount = 0;
            UnitId = 0;
        }

        Console.WriteLine("Ingredienser: " + NewRecipeIngredients.Count);
    }

    private async Task AddRecipeAsync()
    {
        try
        {
            if (RecipeName is null or "" || NewRecipeIngredients == null || NewRecipeIngredients.Count == 0)
            {
                Console.WriteLine("Null i ny opskrift");
            }
            else
            {
                Recipe recipe = new Recipe
                {
                    Name = RecipeName,
                };
                foreach (RecipeIngredient recipeIngredient in NewRecipeIngredients)
                {
                    recipe.RecipeIngredient.Add(recipeIngredient);
                }
                Console.WriteLine("Listen med ingredienser på oprettet opskrift i admin.razor: " + recipe.RecipeIngredient.Count);

                bool result = await _administration.AddRecipeAsync(recipe);

                if (result)
                {
                    Label = "Succes";
                }
                else
                {
                    Label = "Netværksfejl";
                }
            }
        }
        catch (Exception e)
        {
            Label = "Noget gik galt med tilføjelse af opskrift, kontakt backend";
            Console.WriteLine(e.StackTrace);
        }
    }

    public async Task AddRestaurantAsync()
    {
        if (restaurantName is null or "" || cvr == 0 || theme is null or "" || phoneNumber is null or "" || houseNumber == 0 || streetName is null or "" || postalCode == 0)
        {
            Console.WriteLine("Null i ny restaurant");
        }
        else
        {
            Restaurant restaurant = new Restaurant()
            {
                CVR = cvr,
                Name = restaurantName,
                Theme = theme,
                Address = new Address()
                {
                    StreetName = streetName,
                    HouseNumber = houseNumber,
                    PostalCode = postalCode
                },
                PhoneNumber = "+45" + phoneNumber
            };

            try
            {
                bool result = await _administration.AddRestaurantAsync(restaurant);

                if (result)
                {
                    Label = "Succes";
                }
                else if (!result)
                {
                    Label = "Netværksfejl";
                }
            }
            catch (Exception e)
            {
                Label = "Noget gik galt med tilføjelse af restaurant, kontakt backend";
            }
        }
    }


    private void Filter(ChangeEventArgs args)
    {
        List<string> match = new List<string>();
        match.AddRange(IngredientList.Values);

        ShowIngredientsList = match.Where(i => i.Contains(args.Value?.ToString() ?? string.Empty)).ToList();
    }

    private string GetUnitValueFromKey(int key)
    {
        UnitList.TryGetValue(key, out string value);
        value = value?[..1].ToUpper() + value?[1..];
        return value;
    }

}