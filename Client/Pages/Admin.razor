@page "/Admin"
@using Client.Connection.Administration
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAdministration _administration


<AuthorizeView Policy="SignedIn">

    <h3>Admin</h3>

    <div>Tilføj ingredienser</div>

    @{
        if (FoodGroupList == null)
        {
            <p>loading chioces...</p>
        }
        else
        {
            <div>
                <input type="text" @bind-value="ingredientName"/>

                <select name="_foodgroupId" @bind="_foodGroupId">
                    @{
                        foreach (KeyValuePair<int, string> pair in FoodGroupList)
                        {
                            <option value="@pair.Key">@pair.Value</option>
                        }
                    }
                </select>

                <input type="submit" @onclick="AddIngredientAsync"/>
            </div>
            <p>@label</p>
        }
    }

</AuthorizeView>

@code {
    public int _foodGroupId { set; get; }
    public string ingredientName { get; set; }
    public string label { get; set; }

    public Dictionary<int, string> FoodGroupList;

    protected override async Task OnInitializedAsync()
    {
        FoodGroupList = await _administration.getFoodgroupListAsync();
    }

    private async Task AddIngredientAsync()
    {
        try
        {
            bool result = await _administration.AddIngredientAsync(ingredientName, _foodGroupId);

            if (result)
            {
                label = "Succes";
            }
            else if (!result)
            {
                label = "Netværksfejl";
            }
        }
        catch (Exception e)
        {
            label = "Noget gik galt, kontakt backend";
        }
    }

}