@page "/Groups/{groupId}"
@using SharedLibrary.Models
@using Client.Connection.GroupManagement
@using System.Text.Json
@using SharedLibrary.Util
@inject NavigationManager NavigationManager
@inject IGroupManager GroupManager
@inject IJSRuntime JsRuntime

@attribute [Authorize(Policy = "SignedIn")]

<AuthorizeView>
    @if (group == null)
    {
        <PageLoading/>
    }
    else
    {
        <div class="mt-6 p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md border border-gray-300 flex flex-wrap">
            <form class="w-full max-w-lg">
                <h2 class="my-4 text-xl uppercase text-center">
                    Hej @Username
                </h2>
                <div class="img-container">
                    <img src="images/SDblackboard.png" alt="Sarah & Duck blackboard" width="100%">
                    <p class="img-txt-center text-3xl text-gray-100 tracking-wide">
                        @groupId
                    </p>
                </div>
                <!--
                <p class="text-sm font-semibold text-gray-700">Gruppe ID:</p>
                <p class="text-center mx-auto mb-6 py-4 px-2 text-2xl border border-gray-800 rounded">
                    @groupId
                </p>
                -->
                @if (IsGroupOwner)
                {
                    <div class="flex flex-wrap mx-3 mb-6 justify-evenly">
                        @foreach (string type in SwipeOptions)
                        {
                            <div class="w-full md:w-1/2 px-3 mb-6 md:mb-0">
                                <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="@type">
                                    @type
                                </label>
                                <input class="border rounded border-gray-400 mb-2" id="@type" value="@type" type="radio" @onchange="SwipeSelection"
                                       checked="@(SwipeTypeSelected.Equals(type, StringComparison.OrdinalIgnoreCase))" name="toggle">
                            </div>
                        }

                    </div>
                }
                @if (SwipeTypeSelected.Equals(Util.RESTAURANT))
                {
                    <div class="flex flex-wrap mx-3 mb-6 justify-evenly">
                        <div class="w-full md:w-1/2 px-3 mb-6 md:mb-0">
                            <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="grid-zip">
                                Postnummer
                            </label>
                            <input class="w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4" id="grid-zip" type="text" placeholder="8700" @bind-value="zip" maxlength="4">
                        </div>
                    </div>
                }
            </form>
            <table class="w-full divide-gray-200 border border-gray-200 shadow rounded overflow-auto">
                <thead class="bg-gray-200">
                <th class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2">Gruppemedlemmer</th>
                </thead>
                <tbody class="bg-white divide-gray-200">
                @foreach (User user in group.Users)
                {
                    <div class="text-sm text-gray-500">
                        <tr>
                            <td>@user.Username</td>
                        </tr>
                    </div>
                }
                </tbody>
            </table>
            @if (IsGroupOwner)
            {
                <div class="w-full flex justify-end mt-6">
                    <input class="bg-red-800 hover:bg-red-600 duration-500 transition text-gray-100 font-semibold py-3 px-8 border border-gray-400 rounded shadow" type="button" value="Start" @onclick="StartGroupSwipe">
                </div>
            }
        </div>
    }
</AuthorizeView>


@code {

    [Parameter]
    public string groupId { get; set; }

    private Group group { get; set; }
    private string Username { get; set; }
    private bool IsGroupOwner { get; set; }

    private string[] SwipeOptions = {Util.RECIPE, Util.RESTAURANT};
    private string SwipeTypeSelected = Util.RECIPE;
    private int? zip { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GroupManager.RegisterGroupPage(this);
        group = await GroupManager.GetGroupFromIdAsync(groupId);
        await GetUsername();
        IsGroupOwner = Username.Equals(group.GroupOwner.Username);
    }

    public async void ForceGroupUpdate()
    {
        group = await GroupManager.GetGroupFromIdAsync(groupId);
        await InvokeAsync(StateHasChanged);
    }

    public void SwipeStart()
    {
        NavigationManager.NavigateTo($"/Swipe/{groupId}");
    }

    private async Task GetUsername()
    {
        string userAsJson = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "currentUser");
        if (userAsJson is not null)
        {
            User user = JsonSerializer.Deserialize<User>(userAsJson);
            Username = user?.Username;
        }
    }

    private void SwipeSelection(ChangeEventArgs args)
    {
        SwipeTypeSelected = args.Value?.ToString();
    }

    private void StartGroupSwipe()
    {
        GroupManager.SetSwipeType(groupId, SwipeTypeSelected);
    }

}