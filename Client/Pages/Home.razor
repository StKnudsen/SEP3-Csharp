@page "/Home"
@using Client.Connection.GroupManagement
@using System.Text.RegularExpressions
@using SharedLibrary.Models
@using System.Text.Json
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IGroupManager GroupManager
@inject IJSRuntime JsRuntime

@attribute [Authorize(Policy = "SignedIn")]

<AuthorizeView>
    <div class="mt-6 p-6 max-w-l mx-auto bg-white rounded-xl shadow-md flex items-center border border-gray-300">
        <div class="container flex flex-col items-center">
            <img src="images/SDbench.png" alt="Sarah & Duck on bench" width="388" height="178">
            <p class="text-3xl text-red-700 font-bold mx-auto text-center mt-5">Velkommen @context.User.Identity?.Name</p>
            <div class="flex flex-col mt-4 max-w-xs mx-auto">
                <p class="text-sm font-semibold text-gray-700">Gruppe ID:</p>
                <input type="text" class="h-16 rounded border border-gray-400 shadow text-6xl text-gray-700 uppercase tracking-wide text-center" @bind-value="GroupId" maxlength="6">
                <p class="text-red-600 text-sm">@ErrorLabel</p>
                <Button class="mx-auto block my-5 py-3 px-8 bg-red-800 text-gray-100 rounded font-medium hover:bg-red-600 transition duration-500" @onclick="JoinGroupAsync">Deltag i gruppe</Button>
            </div>
            <p class="text-center text-red-700 font-bold">ELLER</p>

            <Button class="mx-auto block my-5 py-3 px-8 bg-red-800 text-gray-100 rounded font-medium hover:bg-red-600 transition duration-500" @onclick="CreateGroupAsync">Opret gruppe</Button>
        </div>
    </div>
</AuthorizeView>

@code {
    private string GroupId { get; set; } = "";
    private string ErrorLabel { get; set; } = "";

    private async Task JoinGroupAsync()
    {
        ErrorLabel = "";

        var regexCheck = new Regex("^[a-zA-Z0-9 ]*$");
        
        if (GroupId.Length < 6 || !regexCheck.IsMatch(GroupId))
        {
            ErrorLabel = "Indtast venligst et gyldigt gruppe ID.";
            return;
        }

        try
        {
            string userAsJson = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "currentUser");
            if (!string.IsNullOrEmpty(userAsJson))
            {
                User user = JsonSerializer.Deserialize<User>(userAsJson);
                bool response = await GroupManager.JoinGroupAsync(user, GroupId.ToUpper());

                if (response)
                {
                    NavigationManager.NavigateTo($"/Groups/{GroupId.ToUpper()}");
                }
            }
        }
        catch (Exception e)
        {
            ErrorLabel = e.Message;
        }
    }

    private async void CreateGroupAsync()
    {
        string userAsJson = await JsRuntime.InvokeAsync<string>("sessionStorage.getItem", "currentUser");
        if (!string.IsNullOrEmpty(userAsJson))
        {
            User user = JsonSerializer.Deserialize<User>(userAsJson);
            string groupId = await GroupManager.CreateGroupAsync(user);

            NavigationManager.NavigateTo($"/Groups/{groupId}");
        }
    }

}